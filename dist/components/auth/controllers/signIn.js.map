{"version":3,"file":"signIn.js","sourceRoot":"src/","sources":["components/auth/controllers/signIn.ts"],"names":[],"mappings":";;;;;;;;;;;AAIA,oDAIgC;AAEhC,sDAAyD;AACzD,oEAA+D;AAE/D,SAAe,MAAM,CAAC,GAAa,EAAE,GAAa;;QAChD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAiC,GAAG,CAAC,IAAI,CAAC;QAEnE,MAAM,IAAA,sBAAY,EAAC,GAAS,EAAE;YAC5B,IAAI,IAAI,CAAC;YAET,IAAI,GAAG,MAAM,iBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,IAAI;gBACP,IAAA,yBAAc,EAAC,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC;YAEtE,MAAM,YAAY,GAAG,IAAA,yBAAe,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,YAAY;gBACf,IAAA,yBAAc,EAAC,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC;YAEtE,MAAM,KAAK,GAAG,IAAA,uBAAa,EAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YACxD,OAAO,IAAA,yBAAc,EAAC;gBACpB,GAAG;gBACH,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;gBACrB,OAAO,EAAE,YAAY;aACtB,CAAC,CAAC;QACL,CAAC,CAAA,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;CAAA;AAED,kBAAe,MAAM,CAAC","sourcesContent":["import { Response } from \"express\";\nimport z from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport {\n  asyncWrapper,\n  comparePassword,\n  generateToken,\n} from \"../../../utils/helpers\";\nimport { signInSchema } from \"../auth.validation\";\nimport { handleResponse } from \"../../../utils/response\";\nimport { prisma } from \"../../../configs/persistence/database\";\n\nasync function signIn(req: IRequest, res: Response) {\n  const { email, password }: z.infer<typeof signInSchema> = req.body;\n\n  await asyncWrapper(async () => {\n    let user;\n\n    user = await prisma.user.findFirst({ where: { email } });\n    if (!user)\n      handleResponse({ res, status: 400, message: \"Invalid credential\" });\n\n    const samePassword = comparePassword(password, user.password);\n    if (!samePassword)\n      handleResponse({ res, status: 400, message: \"Invalid credential\" });\n\n    const token = generateToken({ data: { ref: user.id } });\n    return handleResponse({\n      res,\n      data: { token, user },\n      message: \"successful\",\n    });\n  }, res);\n}\n\nexport default signIn;\n"]}