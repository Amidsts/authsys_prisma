{"version":3,"file":"getProducts.js","sourceRoot":"src/","sources":["components/products/controllers/getProducts.ts"],"names":[],"mappings":";;;;;;;;;;;AAIA,oDAAsD;AACtD,sDAAyD;AACzD,oEAA+D;AAG/D,SAAe,UAAU,CAAC,GAAa,EAAE,GAAa;;QACpD,MAAM,EAAE,SAAS,EAAE,GAAwC,GAAG,CAAC,KAAK,CAAC;QAErE,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;QACrB,IAAI,QAAQ,CAAC;QAEb,MAAM,IAAA,sBAAY,EAAC,GAAS,EAAE;YAC5B,IAAI,SAAS,EAAE,CAAC;gBACd,QAAQ,GAAG,MAAM,iBAAM,CAAC,OAAO,CAAC,SAAS,CAAC;oBACxC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE;iBAC1C,CAAC,CAAC;gBAEH,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACd,OAAO,IAAA,yBAAc,EAAC;wBACpB,GAAG;wBACH,OAAO,EAAE,8BAA8B;wBACvC,MAAM,EAAE,GAAG;qBACZ,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,QAAQ,GAAG,MAAM,iBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;oBACvC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;oBAC1B,OAAO,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE;oBAC9B,IAAI,EAAE,CAAC;oBACP,IAAI,EAAE,EAAE;oBACR,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;yBAC5B;qBACF;iBACF,CAAC,CAAC;YACL,CAAC;YAED,OAAO,IAAA,yBAAc,EAAC;gBACpB,GAAG;gBACH,OAAO,EAAE,gCAAgC;gBACzC,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE,QAAQ;aACf,CAAC,CAAC;QACL,CAAC,CAAA,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;CAAA;AAED,kBAAe,UAAU,CAAC","sourcesContent":["import { Response } from \"express\";\nimport z from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport { asyncWrapper } from \"../../../utils/helpers\";\nimport { handleResponse } from \"../../../utils/response\";\nimport { prisma } from \"../../../configs/persistence/database\";\nimport { deleteProductSchema } from \"../product.validations\";\n\nasync function getProduct(req: IRequest, res: Response) {\n  const { productId }: z.infer<typeof deleteProductSchema> = req.query;\n\n  const { user } = req;\n  let products;\n\n  await asyncWrapper(async () => {\n    if (productId) {\n      products = await prisma.product.findFirst({\n        where: { userId: user.id, id: productId },\n      });\n\n      if (!products) {\n        return handleResponse({\n          res,\n          message: \"this product does not exists\",\n          status: 400,\n        });\n      }\n    } else {\n      products = await prisma.product.findMany({\n        where: { userId: user.id },\n        orderBy: { createdAt: \"desc\" },\n        skip: 0,\n        take: 10,\n        include: {\n          user: {\n            select: { firstName: true },\n          },\n        },\n      });\n    }\n\n    return handleResponse({\n      res,\n      message: \"product retrieved successfully\",\n      status: 200,\n      data: products,\n    });\n  }, res);\n}\n\nexport default getProduct;\n"]}