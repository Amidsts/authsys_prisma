{"version":3,"file":"updateProduct.js","sourceRoot":"src/","sources":["components/products/controllers/updateProduct.ts"],"names":[],"mappings":";;;;;;;;;;;AAIA,oDAAsD;AACtD,sDAAyD;AACzD,oEAA+D;AAG/D,SAAe,aAAa,CAAC,GAAa,EAAE,GAAa;;QACvD,MAAM,EACJ,SAAS,EACT,IAAI,EACJ,WAAW,EACX,KAAK,EACL,eAAe,EACf,GAAG,GACJ,GAAwC,GAAG,CAAC,IAAI,CAAC;QAElD,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;QACrB,MAAM,IAAA,sBAAY,EAAC,GAAS,EAAE;YAC5B,MAAM,aAAa,GAAG,MAAM,iBAAM,CAAC,OAAO,CAAC,SAAS,CAAC;gBACnD,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE;aAC1C,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnB,OAAO,IAAA,yBAAc,EAAC;oBACpB,GAAG;oBACH,OAAO,EAAE,8BAA8B;oBACvC,MAAM,EAAE,GAAG;iBACZ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,iBAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC1C,KAAK,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;gBACzC,IAAI,EAAE;oBACJ,IAAI;oBACJ,WAAW;oBACX,KAAK;oBACL,eAAe;oBACf,GAAG;iBACJ;aACF,CAAC,CAAC;YAEH,OAAO,IAAA,yBAAc,EAAC,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC;QACvE,CAAC,CAAA,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;CAAA;AAED,kBAAe,aAAa,CAAC","sourcesContent":["import { Response } from \"express\";\nimport z from \"zod\";\n\nimport { IRequest } from \"../../../utils/types\";\nimport { asyncWrapper } from \"../../../utils/helpers\";\nimport { handleResponse } from \"../../../utils/response\";\nimport { prisma } from \"../../../configs/persistence/database\";\nimport { updateProductSchema } from \"../product.validations\";\n\nasync function updateProduct(req: IRequest, res: Response) {\n  const {\n    productId,\n    name,\n    description,\n    price,\n    quantityInStock,\n    sku,\n  }: z.infer<typeof updateProductSchema> = req.body;\n\n  const { user } = req;\n  await asyncWrapper(async () => {\n    const productExists = await prisma.product.findFirst({\n      where: { userId: user.id, id: productId },\n    });\n    if (!productExists) {\n      return handleResponse({\n        res,\n        message: \"this product does not exists\",\n        status: 400,\n      });\n    }\n\n    const product = await prisma.product.update({\n      where: { id: productId, userId: user.id },\n      data: {\n        name,\n        description,\n        price,\n        quantityInStock,\n        sku,\n      },\n    });\n\n    return handleResponse({ res, data: product, message: \"successful\" });\n  }, res);\n}\n\nexport default updateProduct;\n"]}