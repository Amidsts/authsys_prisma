{"version":3,"file":"tokenAuth.js","sourceRoot":"src/","sources":["middlewares/tokenAuth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,gEAA+B;AAG/B,gDAAmD;AAEnD,yDAAmC;AACnC,8DAAyD;AAElD,MAAM,WAAW,GAAG,CACzB,GAAa,EACb,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACjB,OAAO,IAAA,yBAAc,EAAC;YACpB,GAAG;YACH,OAAO,EAAE,4BAA4B;YACrC,MAAM,EAAE,GAAG;SACZ,CAAC,CAAC;IACL,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;IAE5B,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,iBAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,KAAK,EAAE;gBACL,EAAE,EAAE,GAAG;aACR;SACF,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAA,yBAAc,EAAC;gBACpB,GAAG;gBACH,OAAO,EAAE,sBAAsB;gBAC/B,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;QACL,CAAC;QAED,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;QAEhB,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,IAAA,yBAAc,EAAC;YACpB,GAAG;YACH,OAAO,EAAE,yBAAyB,GAAG,CAAC,OAAO,EAAE;YAC/C,MAAM,EAAE,GAAG;YACX,GAAG;SACJ,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAA,CAAC;AAxCW,QAAA,WAAW,eAwCtB;AAEK,MAAM,aAAa,GAAG,CAC3B,GAAa,EACb,GAAa,EACb,IAAkB,EAClB,EAAE;IACF,IAAI,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,aAAuB,CAAC;IAChD,KAAK,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAEtC,IAAI,CAAC,KAAK;QAAE,OAAO,IAAI,EAAE,CAAC;IAE1B,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,iBAAS,CAAC,SAAS,CAAC,CAAC;QAEvD,GAAG,CAAC,OAAO,GAAG,OAAiB,CAAC;QAEhC,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,GAAG,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;gBACrC,OAAO,IAAA,yBAAc,EAAC;oBACpB,GAAG;oBACH,OAAO,EAAE,eAAe;oBACxB,MAAM,EAAE,GAAG;oBACX,GAAG;iBACJ,CAAC,CAAC;YACL,CAAC;iBAAM,IAAI,GAAG,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;gBAC5C,OAAO,IAAA,yBAAc,EAAC;oBACpB,GAAG;oBACH,OAAO,EAAE,4CAA4C;oBACrD,MAAM,EAAE,GAAG;oBACX,GAAG;iBACJ,CAAC,CAAC;YACL,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC,CAAA,CAAC;AAnCW,QAAA,aAAa,iBAmCxB","sourcesContent":["import { NextFunction, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nimport { IRequest, IToken } from \"../utils/types\";\nimport { handleResponse } from \"../utils/response\";\nimport { User } from \"@prisma/client\";\nimport appConfig from \"../configs\";\nimport { prisma } from \"../configs/persistence/database\";\n\nexport const requireAuth = async (\n  req: IRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.decoded) {\n    return handleResponse({\n      res,\n      message: \"authentication is required\",\n      status: 401,\n    });\n  }\n\n  const { ref } = req.decoded;\n\n  try {\n    const user = await prisma.user.findFirst({\n      where: {\n        id: ref,\n      },\n    });\n    if (!user) {\n      return handleResponse({\n        res,\n        message: \"authorization failed\",\n        status: 401,\n      });\n    }\n\n    req.user = user;\n\n    return next();\n  } catch (err) {\n    return handleResponse({\n      res,\n      message: `Authentication error: ${err.message}`,\n      status: 401,\n      err,\n    });\n  }\n};\n\nexport const validateToken = async (\n  req: IRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  let token = req.headers.authorization as string;\n  token = token?.replace(\"Bearer \", \"\");\n\n  if (!token) return next();\n\n  try {\n    const decoded = jwt.verify(token, appConfig.jwtSecret);\n\n    req.decoded = decoded as IToken;\n\n    return next();\n  } catch (err) {\n    if (err.name) {\n      if (err.name === \"JsonWebTokenError\") {\n        return handleResponse({\n          res,\n          message: \"invalid token\",\n          status: 401,\n          err,\n        });\n      } else if (err.name === \"TokenExpiredError\") {\n        return handleResponse({\n          res,\n          message: \"authentication expired. Please login again\",\n          status: 401,\n          err,\n        });\n      }\n    }\n  }\n};\n"]}